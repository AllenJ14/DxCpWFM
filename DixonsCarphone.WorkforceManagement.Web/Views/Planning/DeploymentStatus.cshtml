@using DixonsCarphone.WorkforceManagement.ViewModels.BusinessModels
@model FutureDeploymentVm

@{
    ViewBag.Title = "Deployment Status";

    int x = 0;
    int y = 0;

    Func<FutureDeploymentView, string> RAG = (a) =>
    {
        var rtn = "success";
        var toBudget = 1 - (a.Actual / a.Target);
        var percHoliday = a.Holiday / a.Target;

        if (Math.Abs(toBudget) >= 0.2)
        {
            rtn = "danger";
        }
        else if (Math.Abs(toBudget) >= 0.1)
        {
            rtn = "warning";
        }

        if (toBudget >= 0.05 && percHoliday >= 0.1)
        {
            rtn += " toRed";
        }

        return rtn;
    };
}

<div class="row">
    &emsp;
</div>

<div class="panel panel-default">
    <div class="panel-heading text-center">
        <div class="row">
            @if (HttpContext.Current.Session["_AccessLevel"].ToString() == "DD" && HttpContext.Current.Session["_DivisionName"] == null)
            {
                <a href="@Url.Action("SetNewRegion", "Profiles",new { selectedRegionNumber = HttpContext.Current.Session["_AccessArea"].ToString() })" class="btn btn-default pull-left col-md-1 col-sm-1 text-center" role="button" style="margin-left:10px;"><span class="glyphicon glyphicon-triangle-left"></span>Back</a>
            }
            <strong>Deployment</strong>
            <label class="switch pull-right">
                <input type="checkbox" id="advView" />
                <span class="slider round"></span>
            </label>
            <span class="pull-right adv-label">Advanced view</span>
        </div>                
    </div>
    <div id="advComment" class="panel-body text-center" style="display:none;">
        Red borders indicate the store aren't deploying enough hours and may be using too much holiday.
    </div>
</div>

@if (Model.collection == null)
{
    <div class="row">@Html.Partial("~/Views/Shared/_Messages.cshtml", Model)</div>
}
else if (HttpContext.Current.Session["_DivisionName"] != null)
{

    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th class="text-center col-xs-2"></th>
                    @foreach (var item in Model.WeekList)
                    {
                        <th class="text-center col-xs-1">Wk @item.ToString().Substring(4)</th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><strong>Chain</strong></td>
                    @foreach (var item in Model.collection.Where(c => c.SortOrder == null).OrderBy(c => c.WeekNumber))
                    {
                        <td class="text-center @(RAG(item)) tooltipHover" data-tooltip="@string.Format("#{0}_{1}", x, y)"><strong>@item.deployedPerc</strong></td>
                        x += 1;
                    }
                    @{ y += 1; }
                </tr>
            </tbody>
        </table>
    </div>

    foreach (var div in Model.DivisionList.Where(c => c != "NA"))
    {
        <div class="table-responsive" id="@(div)">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th class="text-center col-xs-2"><strong>@string.Format("DCPW0{0}",div)</strong></th>
                        @foreach (var item in Model.WeekList)
                        {
                            <th class="text-center col-xs-1">Wk @item.ToString().Substring(4)</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.BranchList(div))
                    {
                        { x = 0; }
                        var data = Model.collection.Where(c => c.Area == item.ToString());
                        <tr>
                            <td class="col-xs-2"><a href="@Url.Action("SetNewStore","Profiles", new { selectedStoreNumber = "Region " + item.ToString()})">@item.ToString()</a></td>
                            @foreach (var values in data.OrderBy(c => c.WeekNumber))
                        {
                                <td class="text-center @(RAG(values)) tooltipHover" data-tooltip="@string.Format("#{0}_{1}", x, y)">@values.deployedPerc</td>
                                x += 1;
                            }
                        </tr>
                        y += 1;
                    }
                    <tr>
                        <td><strong>Total</strong></td>
                        @{ x = 0; }
                        @foreach (var item in Model.collection.Where(c => c.SortOrder.ToString() == div).OrderBy(c => c.WeekNumber))
                        {
                            <td class="text-center @(RAG(item)) tooltipHover" data-tooltip="@string.Format("#{0}_{1}", x, y)"><strong>@item.deployedPerc</strong></td>
                            x += 1;
                        }
                        @{ y += 1; }
                    </tr>
                </tbody>
            </table>
        </div>
    }

    y = 0;
    x = 0;
    foreach(var item in Model.collection.Where(c => c.SortOrder == null).OrderBy(c => c.WeekNumber))
    {
        <div class="depl_Popup" id="@string.Format("{0}_{1}", x, y)">
            <strong>Target:</strong> @item.Target<br />
            <strong>Actual:</strong> @item.Actual<br />
            <strong>Holiday:</strong> @item.Holiday
        </div>
        x += 1;
    }

    y += 1;
    foreach (var div in Model.DivisionList.Where(c => c != "NA"))
    {
        foreach (var item in Model.BranchList(div))
        {
            x = 0;
            var data = Model.collection.Where(c => c.Area == item.ToString());
            foreach (var values in data.OrderBy(c => c.WeekNumber))
            {
                <div class="depl_Popup" id="@string.Format("{0}_{1}", x, y)">
                    <strong>Target:</strong> @values.Target<br />
                    <strong>Actual:</strong> @values.Actual<br />
                    <strong>Holiday:</strong> @values.Holiday
                </div>
                x += 1;
            }
            y += 1;
        }
        x = 0;
        foreach (var item in Model.collection.Where(c => c.SortOrder.ToString() == div).OrderBy(c => c.WeekNumber))
        {
            <div class="depl_Popup" id="@string.Format("{0}_{1}", x, y)">
                <strong>Target:</strong> @item.Target<br />
                <strong>Actual:</strong> @item.Actual<br />
                <strong>Holiday:</strong> @item.Holiday
            </div>
                x += 1;
            }
            y += 1;
        }
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="text-center"></th>
                @foreach (var item in Model.WeekList)
                {
                    <th class="text-center">Wk @item.ToString().Substring(4)</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.BranchListAll)
            {
                { x = 0; }
                var data = Model.collection.Where(c => c.Area == item.ToString());
                <tr>
                    <td>@item.ToString()</td>
                    @foreach (var values in data)
                    {
                        <td class="text-center @(RAG(values)) tooltipHover" data-tooltip="@string.Format("#{0}_{1}", x, y)">@values.deployedPerc</td>
                        x += 1;
                    }
                </tr>
                y += 1;
            }
        </tbody>
    </table>

    y = 0;
    foreach (var item in Model.BranchListAll)
    {
        x = 0;
        var data = Model.collection.Where(c => c.Area == item.ToString());
        foreach (var values in data)
        {
            <div class="depl_Popup" id="@string.Format("{0}_{1}", x, y)">
                <strong>Target:</strong> @values.Target<br />
                <strong>Actual:</strong> @values.Actual<br />
                <strong>Holiday:</strong> @values.Holiday
            </div>
            x += 1;
        }
        y += 1;
    }
}

@section myScripts{
    <script>
        $(function () {
            var toRed = false;
            var onLoad = @ViewBag.adv;
            var $advComment = $('#advComment');

            if(onLoad){
                $('#advView').click();
                $('.toRed').css({ border: "2px solid #F00" });
                $advComment.slideDown(300);
                toRed = !toRed;
            };

            $(".tooltipHover").hover(function (e) {
                $($(this).data("tooltip")).css({
                    left: e.pageX + 1,
                    top: e.pageY + 1
                }).stop().show(100);
            }, function () {
                $($(this).data("tooltip")).hide();
            });

            $('#advView').click(function () {
                console.log('here');
                if (toRed) {
                    $('.toRed').css({ border: "1px solid #ddd" })
                    toRed = !toRed;
                    $advComment.slideUp(300);
                }
                else {
                    $('.toRed').css({ border: "2px solid #F00" })
                    toRed = !toRed;
                    $advComment.slideDown(300);
                }
                
            });
        });
    </script>
}