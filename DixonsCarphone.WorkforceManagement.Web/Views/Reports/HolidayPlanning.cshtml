@using DixonsCarphone.WorkforceManagement.ViewModels.BusinessModels
@model HolidayPlanningVM

@{
    ViewBag.Title = "Holiday Planning";
}

<div class="row">
    <div class="col-lg-12">
        @Html.Partial("~/Views/Shared/_Messages.cshtml", Model)
    </div>
</div>
<section class="content">
    <div class="row">
        &nbsp;
    </div>

    @if (Model.DetailCollection != null)
    {
        <div class="row">
            <div class="col-lg-12 col-md-12">
                <div class="panel panel-default">
                    <div class="panel-heading text-center">
                        <div class="row">
                            <strong>Holiday Planning</strong>
                        </div>
                    </div>
                    <div class="panel-body">
                        <p>
                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. In eu tortor in nisl ultricies tempus. Fusce dolor purus, feugiat vel mattis eu, vestibulum venenatis ante. Fusce non porta quam. Maecenas vestibulum orci id tincidunt molestie. Pellentesque vehicula eu orci eu auctor. Donec vulputate justo a mi volutpat malesuada.
                            <ul>
                                <li>Vivamus eleifend, felis a porttitor semper, tellus odio finibus enim, vestibulum auctor diam diam a massa.</li>
                                <li>ivamus eleifend, felis a porttitor semper, tellus odio finibus enim, vestibulum auctor diam diam a massa.</li>
                                <li>ivamus eleifend, felis a porttitor semper, tellus odio finibus enim, vestibulum auctor diam diam a massa.</li>
                            </ul>
                        </p>
                    </div>
                </div>
            </div>
        </div>
        @Html.Partial("~/Views/Partials/_HolidayPlanning.cshtml", Model)
    }
</section>
@section myScripts{
    <script>
        $(function() {
            var ctx = document.getElementById("holiday-chart")
            var myChart = new Chart(ctx, {
                // The type of chart we want to create
                type: 'bar',

                // The data for our dataset
                data: {
                    labels: ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52'],
                    datasets:
                        [{
                        label: "Guideline",
                        borderColor: 'rgba(118, 0, 69, 0.7)',
                        data: @Model.GuideArray,
                        fill: false,
                        pointRadius: 0,
                        hitRadius: 4,
                        hoverBorderWidth: 0.5,
                        type: 'line',
                        tension: 0
                        },
                        {
                            label: "Taken",
                            backgroundColor: 'rgba(0, 140, 168, 0.9)',
                            data: @Model.TakenArray,
                        },
                        {
                            label: "Scheduled",
                            backgroundColor: 'rgba(0, 140, 168, 0.4)',
                            data: @Model.SchedArray,
                        }
                        ]
                    },

                // Configuration options go here
                options: {
                    legend:{
                        position: 'bottom',
                    },
                    maintainAspectRatio: false,
                    scales: {
                        xAxes: [{
                            stacked: true,
                            scaleLabel:{
                                display: true,
                                labelString: 'Week'
                            },
                            afterTickToLabelConversion: function(data){


                                var xLabels = data.ticks;

                                xLabels.forEach(function (labels, i) {
                                    if (i % 2 == 1){
                                        xLabels[i] = '';
                                    }
                                });
                            }
                        }],
                        yAxes: [{
                            stacked: true
                        }]
                    },
                    tooltips: {
                        mode: 'index',
                        callbacks: {
                            label: function(tooltipItems, data){
                                return tooltipItems.yLabel + ' hrs';
                            }
                        }
                    }
                }
            });
        });
    </script>    
    }