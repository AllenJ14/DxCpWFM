@using DixonsCarphone.WorkforceManagement.ViewModels.BusinessModels
@model MyTeamViewModel

@{
    ViewBag.Title = "My Team";
}

<div class="row">
    <div class="col-lg-12">
        @Html.Partial("~/Views/Shared/_Messages.cshtml", Model)
    </div>
</div>
<section class="content">
    <div class="row">
        &nbsp;
    </div>

    @Html.Partial("~/Views/Partials/_PageBlurb.cshtml", Model)

    @if ((bool)HttpContext.Current.Session["_ROIFlag"])
    {
        <div class="alert alert-warning text-center"><strong>Coming soon!</strong></div>
    }

    @if (Model.ContractBases != null)
    {
        <div class="row">
            <div class="col-lg-12 col-md-12">
                <div class="panel panel-default">
                    <div class="panel-heading text-center">
                        <strong>Contract Bases</strong>
                    </div>
                    <div class="panel-body">
                        <p>
                            These contract bases provide guidance as to where the store's contracted cost needs to sit for the remainder of the year. Contract bases are used in order to:
                            <ul>
                                <li>Keep payroll (SOH) controlled,</li>
                                <li>Ensure we recruit into the right stores,</li>
                                <li>Enable us to react to changes in trade.</li>
                            </ul>
                        </p>
                        <p>
                            Please remember these are <u>max</u> contract bases and not targets - you should only recruit to these numbers if you have robust plans in place to deliver your SOH, including good holiday management.
                        </p>
                        <p class="text-center">
                            <i><u>Geek Squad hours are not included in the max contract base.</u></i>
                        </p>
                        <div class="row">
                            @Html.Partial("~/Views/Partials/_MyContractBase.cshtml", Model)
                        </div>
                        <p>
                            Great holiday management will enable you to contract to the max contract base and deliver your SOH budget each week.<br />
                            Holiday needs to be used inline with the needs of the business so at some points we'll encourage more holiday e.g. at quiet times of the year. At other points, e.g. peak periods, holiday may be controlled to ensure we can deploy enough hours to capatalise on business opportunities.<br />
                            The below is store specific guidance on how much of your store's holiday entitlement should be taken throughout the year, with the goal being 100% taken at the end of the year.
                        </p>
                        <div class="row">
                            @Html.Partial("~/Views/Partials/_MyHolidayPhasing.cshtml", Model)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Model.MyTeam != null && Model.MyTeam.Count() > 0)
    {
        <div class="row">
            <div class="col-lg-12 col-md-12">
                <div class="panel panel-default">
                    <div class="panel-heading text-center">
                        <strong>My Team</strong>
                    </div>
                    <div class="panel-body">
                        <p>These are the details of your team currently held by the HR system.</p>
                        <p>If you believe any of these details are incorrect please raise with your TPC who can help get these rectified.</p>
                        <div class="row">
                            @Html.Partial("~/Views/Partials/_MyTeamSimple.cshtml", Model)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <canvas id="test"></canvas>
</section>

@*@section MyScripts{
    <script src="~/Content/New/Gauge.js"></script>
    <script>
        var canvas = document.getElementById("contract-mix");
        var value = @Model.MyTeam.Average(x => x.CONTRACT_HOURS);
        
        if (value > 33) {
            value = 33
        };
        if(value < 15){
            value = 15
        };

        var opts = {

            angle: 0, // The length of each line
            lineWidth: 0.5, // The line thickness
            radiusScale: 0.66,
            pointer: {
                length: 0.6, // The radius of the inner circle
                strokeWidth: 0.035, // The rotation offset
                color: '#000000' // Fill color
            },
            strokeColor: '#E0E0E0',   // to see which ones work best for you
            generateGradient: true,
            staticZones: [
                {strokeStyle: "#F03E3E", min: 15, max: 18}, // Red from 100 to 130
                {strokeStyle: "#FFDD00", min: 18, max: 21}, // Yellow
                {strokeStyle: "#30B32D", min: 21, max: 27}, // Green
                {strokeStyle: "#FFDD00", min: 27, max: 30}, // Yellow
                {strokeStyle: "#F03E3E", min: 30, max: 33}  // Red
            ],
            staticLabels:{
                font: "16px sans-serif",  // Specifies font
                labels: [18,24,30],  // Print labels at these values
                color: "#000000",  // Optional: Label text color
                fractionDigits: 0  // Optional: Numerical precision. 0=round off.
            }
        };
        canvas = document.getElementById('contract-mix'); // your canvas element
        var gauge = new Gauge(canvas);
        gauge.setOptions(opts); 
        gauge.setMinValue(15);
        gauge.maxValue = 33; // set max gauge value
        gauge.animationSpeed = 32; // set animation speed (32 is default value)
        gauge.set(value); // set actual value

    </script>
    <script>
        var cnv = document.getElementById("contract-act");
        var ctx = cnv.getContext("2d");
        var posx = cnv.width/2;
        var posy = cnv.height - 25;

        ctx.fillStyle = "#000000";
        ctx.beginPath();
        ctx.arc(posx, posy, 20, 0, 2* Math.PI);
        ctx.fill();

        ctx.fillStyle = "#FFFFFF";
        ctx.font = "bold 16px sans-serif"
        ctx.fillText(@string.Format("{0:0}", Model.MyTeam.Average(x => x.CONTRACT_HOURS)),posx - 10, posy + 5)
    </script>
}*@