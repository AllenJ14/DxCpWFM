@using DixonsCarphone.WorkforceManagement.ViewModels
@using DixonsCarphone.WorkforceManagement.ViewModels.BusinessModels
@using DixonsCarphone.WorkforceManagement.Business.Entities;
@model StorePandLDetailViewModel

@{ 
    var subCat = 0;
    var prevSubCat = string.Empty;
    PandLView detail = null;
    var prevSubCatStr = string.Empty;
    SectionTotals sectionTotal = null;
    string sectionTitle = string.Empty;
    string cssClass = string.Empty;
    switch (Model.PandLDetails.First().AccountEntryTypeId)
    {
        case 1:
            sectionTitle = "Margin Total";
            cssClass = "info";
            break;
        case 2:
            sectionTitle = "Costs Total";
            cssClass = "warning";
            break;
        case 3:
            sectionTitle = "Non Controllable Costs Total";
            cssClass = "success";
            break;
    }
    Func<string, string> GetBlurb = (i) =>
    {
        var rtn = "";
        if (i == "Stationery")
        {
            rtn = "Stationery ordered via Commercial Grp";
        }
        else if (i == "Maintenance Complete (ipsos/videra)")
        {
            rtn = "Repair call out charges for Ipsos (FF counters) & Videra (Digital Signage) where no fault was found";
        }
        else if (i == "Trade In Non Compliance")
        {
            rtn = "Non-compliance with handset trade ins";
        }
        else if (i == "SOH")
        {
            rtn = "SOH spend costed at a notional amount of £10 per hour";
        }
        else if (i == "FMIP non compliance")
        {
            rtn = "Non-compliance for iPhones traded in with FMiP activated";
        }
        else if (i == "Cash/Banking Losses")
        {
            rtn = "Money lost when cashing up or banking";
        }
        else if (i == "Electricity")
        {
            rtn = "Electricity used in store, for lights, etc.";
        }
        else if (i == "Petty cash Expenses")
        {
            rtn = "Expenses processed through PIE";
        }
        else if (i == "Refuse")
        {
            rtn = "Bin service charges, including penalties";
        }
        return rtn;
    };
 }

    @if (Model.PandLDetails.FirstOrDefault()?.AccountEntryTypeId == 3)
    {
        <tr>
            <td colspan="11" class="text-center">&nbsp;</td>
        </tr>
        <tr style="background-color:lightblue">
            <td colspan="11" class="text-center"><b>Non Controllable Costs</b></td>
        </tr>
        <tr>
            <td colspan="11" class="text-center">&nbsp;</td>
        </tr>
    }

@foreach (var entry in Model.PandLDetails)
    {
        var breakDowns = Model.BreakDowns.Where(x => x.AccountEntryDetailId == entry.AccountEntryDetailId).ToList();
        detail = entry;

        var actual = string.Format("{0:c0}", entry.ActualAmount);
        var budget = string.Format("{0:c0}", entry.BudgetAmount);

        var qtdActual = string.Format("{0:c0}", entry.QtdActualAmount);
        var qtdBudget = string.Format("{0:c0}", entry.QtdBudgetAmount);

        var ytdActual = string.Format("{0:c0}", entry.YtdActualAmount);
        var ytdBudget = string.Format("{0:c0}", entry.YtdBudgetAmount);
    
        if (subCat != entry.AccountEntrySubTypeId)
        {
            var prefix = "Total";

            prevSubCatStr = string.Format("{0} {1}", prefix, prevSubCat);
            if (subCat != 0)
            {
                sectionTotal = Model.SubTypeSectionTotals.FirstOrDefault(x => x.AccountEntrySubTypeId == subCat);

            <tr>
                <td colspan="2"><b>Subtotal</b></td>
                <td><b>@string.Format("{0:C0}", sectionTotal?.ActualTotal)</b></td>
                <td><b>@string.Format("{0:C0}", sectionTotal?.BudgetTotal)</b></td>
                <td><b>@string.Format("{0:0}%", sectionTotal?.PercToBudgetTotal)</b></td>

                <td><b>@string.Format("{0:C0}", sectionTotal?.QtdActualTotal)</b></td>
                <td><b>@string.Format("{0:C0}", sectionTotal?.QtdBudgetTotal)</b></td>
                <td><b>@string.Format("{0:0}%", sectionTotal?.QtdPercToBudgetTotal)</b></td>

                <td><b>@string.Format("{0:C0}", sectionTotal?.YtdActualTotal)</b></td>
                <td><b>@string.Format("{0:C0}", sectionTotal?.YtdBudgetTotal)</b></td>
                <td><b>@string.Format("{0:0}%", sectionTotal?.YtdPercToBudgetTotal)</b></td>
            </tr>
            <tr>
                <td colspan="2"><b><small>Variance</small></b></td>
                <td><b></b></td>
                <td><b></b></td>
                <td><b style="color:@(sectionTotal?.var<0 ? "#ff0000" : "#000000")"><small>@string.Format("{0:£#,##0 ;(£#,##0);-   }", sectionTotal?.var)</small></b></td>

                <td><b></b></td>
                <td><b></b></td>
                <td><b style="color:@(sectionTotal?.Qtdvar<0 ? "#ff0000" : "#000000")"><small>@string.Format("{0:£#,##0 ;(£#,##0);-   }", sectionTotal?.Qtdvar)</small></b></td>

                <td><b></b></td>
                <td><b></b></td>
                <td><b style="color:@(sectionTotal?.YtdVar<0 ? "#ff0000" : "#000000")"><small>@string.Format("{0:£#,##0 ;(£#,##0);-   }", sectionTotal?.YtdVar)</small></b></td>
            </tr>
        }

        prevSubCat = entry.AccountEntrySubTypeText;

        <tr>
            <td colspan="11" style="padding:0px">&nbsp;</td>
        </tr>

        <tr class="text-center">
            <td colspan="11">
                <b>@entry.AccountEntrySubTypeText</b>
                @if (entry.AccountEntrySubTypeText == "Sales Margin")
                {
                    var store = HttpContext.Current.GetSessionObject<Store>("_StoreDetails");
                    var storenum = store != null ? store.CST_CNTR_ID : 0;
                    var PopUpTxt = storenum > 7000 ? "Margin values are calculated from gross sales bonus, assuming GSB is 2.5% of sales margin" : "Margin values are calculated from gross sales bonus, assuming GSB is 4% of sales margin";
                    <span class="text-center"><a tabindex="0" role="button" class="glyphicon glyphicon-info-sign" data-toggle="popover" data-placement="right" data-content="@PopUpTxt" data-trigger="focus" style="color:black"></a></span>
                }                
            </td>
        </tr>

        subCat = entry.AccountEntrySubTypeId.GetValueOrDefault();
    }

    if (string.IsNullOrEmpty(prevSubCat))
    {
        prevSubCat = entry.AccountEntrySubTypeText;
    }

    <tr class=@cssClass>
        <td>
            @entry.DetailTitle
            @if (GetBlurb(entry.DetailTitle) != "")
            {
                <span class="pull-right text-center"><a tabindex="0" role="button" class="glyphicon glyphicon-info-sign" data-toggle="popover" data-placement="right" data-content="@GetBlurb(entry.DetailTitle)" data-trigger="focus" style="color:black"></a></span>
            }            
        </td>

        @if (breakDowns != null && breakDowns.Count > 0)
        {
            <td>@Html.Partial("~/Views/Partials/_AccountEntryDetailBreakDown.cshtml", breakDowns)</td>
        }
        else
        {
            <td>&nbsp;</td>
        }
        <td>@actual</td>
        <td>@(entry.AccountEntrySubTypeId == 5 ? "" : budget)</td>
        <td>@(entry.AccountEntrySubTypeId == 5 ? "" : string.Format("{0:0}{1}", entry.PercToBudget, entry.PercToBudget.HasValue ? "%" : string.Empty))</td>
        <!--TODO-->
        <td>@qtdActual</td>
        <td>@(entry.AccountEntrySubTypeId == 5 ? "" : qtdBudget)</td>
        <td>@(entry.AccountEntrySubTypeId == 5 ? "" : string.Format("{0:0}{1}", entry.QtdPercToBudget, entry.QtdPercToBudget.HasValue ? "%" : string.Empty))</td>

        <td>@ytdActual</td>
        <td>@(entry.AccountEntrySubTypeId == 5 ? "" : ytdBudget)</td>
        <td>@(entry.AccountEntrySubTypeId == 5 ? "" : string.Format("{0:0}{1}", entry.YtdPercToBudget, entry.YtdPercToBudget.HasValue ? "%" : string.Empty))</td>

    </tr>
}

@{
    var overAllSectionTotal = Model.OverallSectionTotals;
    sectionTotal = Model.SubTypeSectionTotals.FirstOrDefault(x => x.AccountEntrySubTypeId == detail.AccountEntrySubTypeId.GetValueOrDefault());
}

<tr>
    <td colspan="2"><b>Subtotal</b></td>
    <td><b>@string.Format("{0:C0}", sectionTotal?.ActualTotal)</b></td>
    <td><b>@string.Format("{0:C0}", sectionTotal?.BudgetTotal)</b></td>
    <td><b>@string.Format("{0:0}%", sectionTotal?.PercToBudgetTotal)</b></td>

    <td><b>@string.Format("{0:C0}", sectionTotal?.QtdActualTotal)</b></td>
    <td><b>@string.Format("{0:C0}", sectionTotal?.QtdBudgetTotal)</b></td>
    <td><b>@string.Format("{0:0}%", sectionTotal?.QtdPercToBudgetTotal)</b></td>

    <td><b>@string.Format("{0:C0}", sectionTotal?.YtdActualTotal)</b></td>
    <td><b>@string.Format("{0:C0}", sectionTotal?.YtdBudgetTotal)</b></td>
    <td><b>@string.Format("{0:0}%", sectionTotal?.YtdPercToBudgetTotal)</b></td>
</tr>

<tr>
    <td colspan="2"><b><small>Variance</small></b></td>
    <td><b></b></td>
    <td><b></b></td>
    <td><b style="color:@(sectionTotal?.var<0 ? "#ff0000" : "#000000")"><small>@string.Format("{0:£#,##0 ;(£#,##0);-   }", sectionTotal?.var)</small></b></td>

    <td><b></b></td>
    <td><b></b></td>
    <td><b style="color:@(sectionTotal?.Qtdvar<0 ? "#ff0000" : "#000000")"><small>@string.Format("{0:£#,##0 ;(£#,##0);-   }", sectionTotal?.Qtdvar)</small></b></td>

    <td><b></b></td>
    <td><b></b></td>
    <td><b style="color:@(sectionTotal?.YtdVar<0 ? "#ff0000" : "#000000")"><small>@string.Format("{0:£#,##0 ;(£#,##0);-   }", sectionTotal?.YtdVar)</small></b></td>
</tr>

<tr>
    <td colspan="11" style="padding:0px">&nbsp;</td>
</tr>

<tr>
    <td colspan="2"><b>@sectionTitle</b></td>
    <td><b>@string.Format("{0:C0}", overAllSectionTotal?.ActualTotal)</b></td>
    <td><b>@string.Format("{0:C0}", overAllSectionTotal?.BudgetTotal)</b></td>
    <td><b>@string.Format("{0:0}%", overAllSectionTotal?.PercToBudgetTotal)</b></td>


    <td><b>@string.Format("{0:C0}", overAllSectionTotal?.QtdActualTotal)</b></td>
    <td><b>@string.Format("{0:C0}", overAllSectionTotal?.QtdBudgetTotal)</b></td>
    <td><b>@string.Format("{0:0}%", overAllSectionTotal?.QtdPercToBudgetTotal)</b></td>


    <td><b>@string.Format("{0:C0}", overAllSectionTotal?.YtdActualTotal)</b></td>
    <td><b>@string.Format("{0:C0}", overAllSectionTotal?.YtdBudgetTotal)</b></td>
    <td><b>@string.Format("{0:0}%", overAllSectionTotal?.YtdPercToBudgetTotal)</b></td>

</tr>

@*<tr>
    <td colspan="11" class="text-center" style="padding:0px">&nbsp;</td>
</tr>*@

@*<tr>
    <td colspan="11" class="text-center" style="padding:0px">&nbsp;</td>
</tr>*@



